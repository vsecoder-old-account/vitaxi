# -*- coding: utf-8 -*-

# AIOGRAM
import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types, filters
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, reply_keyboard
from aiogram.utils import executor
import aiogram.utils
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_webhook
from aiogram.contrib.middlewares.logging import LoggingMiddleware

# DB models
from models import db_session
from models.users import User

db_session.global_init('database.db')

bot_token = '1956084820:AAG2RArJWL1_ukR2JtQyRCwE7qbzVXwraDQ' # @VitaxiBot

bot = Bot(token=bot_token)

# For example use simple MemoryStorage for Dispatcher.
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

class States(Helper):
    mode = HelperMode.snake_case

    STATE_0 = ListItem()

# —Å—á–∏—Ç–∞–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
users = 0 # —é–∑–µ—Ä—ã

# /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
	global users
	#
	iduser = message.from_user.id
	session = db_session.create_session()
	#
	user_all = session.query(User).all()
	T = True
	for all in user_all:
		if all.id == iduser:
			T = False

	if T == True:
		# –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
		session = db_session.create_session()
		name = message.from_user.first_name
		url = message.from_user.username
		iduser = message.from_user.id
		user = User(
			id=iduser,
			name=name,
			ref='',
			refs='',
			test='',
			score=0
		)
		users += 1
		session.add(user)
		session.commit()
		# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
		yes_bt = KeyboardButton('–£—á–∞—Å—Ç–≤—É—é')
		main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
		main_kb.add(yes_bt)
		await bot.send_message(message.chat.id, '''–£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ,
—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£—á–∞—Å—Ç–≤—É—é", –∞ –∑–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤–∞—à –ø–æ–∑—ã–≤–Ω–æ–π –∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ.

<code>*–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–º–Ω–∏—Ç–µ —Å–≤–æ–π –ø–æ–∑—ã–≤–Ω–æ–π, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∫ –Ω–∞–º –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É 8 495 256 11 44 –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫ –Ω–∞–º –Ω–∞ WhatsApp  8 999 555 55 35 –∏ –º—ã –≤–∞–º –µ–≥–æ –ø–æ–¥—Å–∫–∞–∂–µ–º.</code>

<b>–ü—Ä–∞–≤–∏–ª–∞:</b>



1) –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª (https://t.me/joinchat/z2BBGkQLuLYyNjAy) 
3) –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ù–ï –ú–ï–ù–ï–ï 10 –ü–û–ï–ó–î–û–ö –≤ –ª—é–±–æ–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–µ —á–µ—Ä–µ–∑ –Ω–∞—à –ø–∞—Ä–∫ (–º–æ–∂–Ω–æ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–µ–∑–¥–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞—Ö)


<b>–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è?</b>

1) –ó–∞–π–¥–∏—Ç–µ –Ω–∞ <a href="https://vi.taxi/">—Å–∞–π—Ç</a> –∏–ª–∏ <a href="https://play.google.com/store/apps/details?id=taxi.sss.app&hl=ru&gl=US">–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</a> –ø–æ –≤—ã–≤–æ–¥—É —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Å–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
2) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å"
3) –í–ø–∏—à–∏—Ç–µ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å

‚ùóÔ∏è–í–ê–ñ–ù–û‚ùóÔ∏è

–ü–∏—à–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç –Ω–æ–º–µ—Ä, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—å, –∏–Ω–∞—á–µ –æ–Ω –∑–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—Å—è!
''', parse_mode="HTML")
		await bot.send_message(message.chat.id, '–î–ª—è —É—á–∞—Å—Ç–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href="https://t.me/joinchat/z2BBGkQLuLYyNjAy">–∫–∞–Ω–∞–ª</a>', reply_markup=main_kb, parse_mode="HTML")
	else:
		# —é–∑–µ—Ä –µ—Å—Ç—å
		test = ''
		session = db_session.create_session()
		user_all = session.query(User).all()
		for user in user_all:
			if user.id == message.from_user.id:
				test = user.test

		session.commit()
		if test:
			keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
			helpe = types.KeyboardButton(text='üÜò –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞')
			keyboard.add(helpe)
			await bot.send_message(message.chat.id, 'üôã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', reply_markup=keyboard)
		else:
			yes_bt = KeyboardButton('–£—á–∞—Å—Ç–≤—É—é')
			main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
			main_kb.add(yes_bt)
			await bot.send_message(message.chat.id, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ <a href="https://t.me/joinchat/z2BBGkQLuLYyNjAy">–∫–∞–Ω–∞–ª</a>!', reply_markup=main_kb, parse_mode="HTML")

@dp.message_handler(content_types=["text"])
async def check(message: types.Message):
	try:
		if message.text == '–£—á–∞—Å—Ç–≤—É—é':
			ch = await bot.get_chat_member(chat_id='@Vitaxi_news', user_id=message.from_user.id)
			if ch.status != 'left':
				test = ''
				session = db_session.create_session()
				user_all = session.query(User).all()
				for user in user_all:
					if user.id == message.from_user.id:
						user.test = '+'

				session.commit()
				keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
				helpe = types.KeyboardButton(text='üÜò –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞')
				keyboard.add(helpe)
				await bot.send_message(message.chat.id, 'üôã–û—Ç–ª–∏—á–Ω–æ, –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!', reply_markup=keyboard)
				await bot.send_message(message.chat.id, '''1) –ó–∞–π–¥–∏—Ç–µ –Ω–∞ <a href="https://vi.taxi/">—Å–∞–π—Ç</a> –∏–ª–∏ <a href="https://play.google.com/store/apps/details?id=taxi.sss.app&hl=ru&gl=US">–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</a> –ø–æ –≤—ã–≤–æ–¥—É —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Å–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
2) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å"
3) –í–ø–∏—à–∏—Ç–µ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å''', parse_mode="HTML")
			else:
				yes_bt = KeyboardButton('–£—á–∞—Å—Ç–≤—É—é')
				main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
				main_kb.add(yes_bt)
				await bot.send_message(message.chat.id, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ <a href="https://t.me/joinchat/z2BBGkQLuLYyNjAy">–∫–∞–Ω–∞–ª</a>!', reply_markup=main_kb, parse_mode="HTML")
		elif message.text == "üÜò –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞":
			keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
			back = types.KeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥')
			keyboard.add(back)
			await bot.send_message(message.chat.id, '–°–ª–µ–¥—É—é—â–µ–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º!', reply_markup=keyboard)
			state = dp.current_state(user=message.from_user.id)
			await state.set_state(States.all()[0])
		elif message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
			keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
			helpe = types.KeyboardButton(text='üÜò –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞')
			keyboard.add(helpe)
			await bot.send_message(message.chat.id, 'üìö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard)
		else:
			keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
			helpe = types.KeyboardButton(text='üÜò –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞')
			keyboard.add(helpe)
			await bot.send_message(message.chat.id, 'ü§ï –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!', reply_markup=keyboard)
	except BaseException as e:
		await bot.send_message(1218845111, '–í —Å–∏—Å—Ç–µ–º–µ –æ—à–∏–±–∫–∞...\n<code>' + str(e) + '</code>', parse_mode='html')
		await bot.send_message(message.chat.id, '–£–ø—Å, –æ—à–∏–±–∫–∞...')

@dp.message_handler(state=States.STATE_0)
async def state_case_met1(message: types.Message):
	await bot.send_message(665623884, '–í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @' + message.from_user.username + ':\n\n' + message.text)
	await bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!')

	state = dp.current_state(user=message.from_user.id)
	await state.reset_state()
#
if __name__ == "__main__":
	executor.start_polling(dp)
